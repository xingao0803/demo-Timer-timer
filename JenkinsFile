// Artifactory server instance, defined in Jenkins --> Manage:
def artifactory_server = 'demo-arti'

// Conan repository in Artifactory server
def artifactory_repo = 'demo-conan-local'

// Binary repository in Artifactory server
def binary_repo = 'demo-cpp-local'

// User/Pass for Artifactory server
def user_name = 'admin'
def user_apikey = 'APBG9f7okturGUX3EH6LhxhbBmR'

// Source Code project in github
def repo_url = 'https://github.com/xingao0803/demo-Timer-timer.git'
def repo_branch = 'master'

node {
    def server
    def client
    def serverName
    def buildInfo

    stage("Get project"){
        // Clone source code from github:
        git branch: repo_branch, url: repo_url
    }
    
    stage("Configure Artifactory/Conan"){
        // Obtain an Artifactory server instance: 
        server = Artifactory.server artifactory_server

        // Create a conan client instance:
        client = Artifactory.newConanClient()
 
        // Add a new repository to the conan client.
        // The 'remote.add' method returns a 'serverName' string, which is used later in the script:
        serverName = client.remote.add server: server, repo: artifactory_repo

        // Create a local build-info instance:
        buildInfo = Artifactory.newBuildInfo()
        
        // Login the new conan remote server
        def command = "user -r ${serverName} -p ${user_apikey} ${user_name}"
        client.run(command: command.toString(), buildInfo: buildInfo)
    }

    stage("Get dependencies from Artifactory repository"){
        sh "mkdir -p build"
        dir ('build') {
            // Download dependencies, build if only source code there
            def command = "install .. -r ${serverName}"
            client.run(command: command.toString(), buildInfo: buildInfo)
        }
    }

    stage("Build project"){
        dir ('build') {
            // Build with g++
            sh "g++ ../*.cpp @conanbuildinfo.args -o newTimer"

        }
    }
    
    stage("Run project"){
        dir ('build') {
            // Build with g++
            sh "./newTimer"
        }
    }
    
    stage("Upload binary"){
        dir ('build') {
            // Upload binary app with settings to artifactory
            tartgetRepo = "${binary_repo}/Timer-timer/${buildInfo.number}/"
            def uploadSpec = """{
                "files": [
                    {
                        "pattern": "./newTimer",
                        "target": "${tartgetRepo}",
                        "props": "arch=x86_64;arch_build=x86_64;compiler=apple-clang;compiler.libcxx=libc++;compiler.version=9.1;os=Macos;os_build=Macos"
                    }
                ]
            }""" 

            def buildInfo1 = server.upload(uploadSpec)
            buildInfo.append buildInfo1
            server.publishBuildInfo buildInfo
        }
    }

}
